	Beginner's Guide to Version Control Systems (VCS)

A Version Control System is a tool that helps developers manage changes to code over time.
It records every modification made to a project, providing a detailed history of changes,
making it easy to revert to previous versions, and facilitating collaboration between
multiple developers.

Types of Version Control Systems:

1. Local Version Control Systems
In a local VCS, all versioning is managed on a single computer. Developers manually track
changes by saving copies of the project at different stages.
Example: Using folders like Project_v1, Project_v2, and so on to maintain versions.
Disadvantages:
- Difficult to track changes accurately.
- No collaboration support.
- High risk of data loss if the computer crashes.

2. Centralised Version Control Systems
In a CVCS, a central server stores all project files and version history. Developers work
on local copies and synchronise changes with the central server.
Examples:
- Apache Subversion (SVN): Popular in the early 2000s.
- Perforce: Still used in certain industries like gaming.
Advantages:
- Centralised control simplifies administration.
- Teams can work on shared projects.
Disadvantages:
- Dependency on the central server.
- No offline access to version history.
- Risk of server failure.

3. Distributed Version Control Systems
DVCS stores a complete copy of the project and version history on every developer’s
computer. Developers can work offline and synchronise changes when connected to a shared
repository.
Examples:
- Git: The most widely used DVCS.
- Mercurial: Known for ease of use.
Advantages:
- Offline access to the full project history.
- No single point of failure.
- Better collaboration with branching and merging.
Disadvantages:
- Steeper learning curve.

Here are some key reasons to use VCS:

1. Tracking Changes
2. Reverting to Previous Versions
3. Collaboration
4. Code Review and Quality Assurance
5. Backup and Recovery